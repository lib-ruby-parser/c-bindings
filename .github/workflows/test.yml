name: test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: ${{ matrix.build.name }}
    runs-on: ${{ matrix.build.os }}
    env:
      # CC: ${{ matrix.build.cc }}
      # CXX: ${{ matrix.build.cxx }}
      # LD: ${{ matrix.build.ld }}
      CARGOFLAGS: ${{ matrix.build.cargoflags }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - os: ubuntu-latest
            name: ASAN on ubuntu
            run: |
              mkdir -p build && cd build
              CC=clang CCFLAGS="-fsanitize=address" cmake ..
              cmake --build .
              ./tests/test-runner

          - os: ubuntu-latest
            name: Valgrind on ubuntu
            cargoflags: --features="generate-bindings,onig"
            run: |
              mkdir -p build && cd build
              CC=clang cmake ..
              cmake --build .
              valgrind ./tests/test-runner

          - os: macos-latest
            name: Run tests on MacOS
            cargoflags: --features="generate-bindings,onig"
            run: |
              mkdir -p build && cd build
              CC=clang cmake ..
              cmake --build .
              ./tests/test-runner

          - os: windows-latest
            name: Run tests on Windows
            cargoflags: ""
            run: |
              mkdir -p build && cd build
              CC=clang cmake ..
              cmake --build .
              ./tests/test-runner

    steps:
      - name: setup msvc on windows
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: fix linker on windows
        if: runner.os == 'Windows'
        run: |
          rm "C:\\Program Files\\Git\\usr\\bin\\link.exe"
          which -a link.exe

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.build.target }}
          override: true

      - name: checkout
        uses: actions/checkout@v2

      - name: install valgrind
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind libtool-bin

      - name: run tests
        shell: bash
        run: ${{ matrix.build.run }}
