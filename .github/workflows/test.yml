name: test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    shell: bash

jobs:
  test:
    name: ${{ matrix.build.name }}
    runs-on: ${{ matrix.build.os }}
    env:
      TARGET: ${{ matrix.build.target }}
      CC: ${{ matrix.build.cc }}
      LD: ${{ matrix.build.ld }}
      AR: ${{ matrix.build.ar }}
      CFLAGS: ${{ matrix.build.cflags }}
      RUSTFLAGS: ${{ matrix.build.rustflags }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - name: test on linux (clang)
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cc: clang-12
            ld: ld.lld-12
            ar: llvm-ar-12
            run: make test

          - name: test on linux (clang, LTO)
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cc: clang-12
            ld: ld.lld-12
            ar: llvm-ar-12
            cflags: -flto=thin -fuse-ld=lld-12
            rustflags: -Clinker-plugin-lto -Clinker=clang-12 -Clink-arg=-fuse-ld=lld-12
            run: |
              make libruby_parser_c.a
              $LD --relocatable libruby_parser_c.a --whole-archive -o merged.o
              rm libruby_parser_c.a
              $(AR) crus libruby_parser_c.a merged.o
              make test

          # - name: test on mac (clang)
          #   os: macos-latest
          #   target: x86_64-apple-darwin
          #   cc: clang
          #   ld: ld
          #   run: |
          #     $CC --version
          #     make do-codegen && make test

          # - name: test on windows (msvc)
          #   os: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   cc: cl.exe
          #   ld: link.exe
          #   run: |
          #     make do-codegen
          #     make test

          # - name: test on windows (mingw)
          #   os: windows-latest
          #   target: x86_64-pc-windows-gnu
          #   cc: gcc
          #   ld: ld
          #   run: |
          #     gcc --version
          #     make test

          # - name: valgrind
          #   os: ubuntu-latest
          #   target: x86_64-unknown-linux-gnu
          #   cc: clang-12
          #   ld: ld.lld-12
          #   run: |
          #     make test-runner
          #     valgrind ./test-runner

          # - name: asan
          #   os: ubuntu-latest
          #   target: x86_64-unknown-linux-gnu
          #   cc: clang-12
          #   ld: ld.lld-12
          #   run: ASAN_OPTIONS=detect_leaks=1 CFLAGS="-fsanitize=address" make test

    steps:
      - name: setup msvc on windows
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.build.target }}
          override: true

      - name: print rustc detailed version
        run: rustc --version --verbose

      - name: checkout
        uses: actions/checkout@v2

      # - name: install valgrind
      #   if: runner.os == 'Linux'
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y valgrind libtool-bin

      - name: run tests
        run: ${{ matrix.build.run }}
