name: test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    shell: bash

jobs:
  test:
    name: ${{ matrix.build.name }}
    runs-on: ${{ matrix.build.os }}
    env:
      BUILD_ENV: debug
      TARGET: ${{ matrix.build.target }}
      CC: ${{ matrix.build.cc }}
      LD: ${{ matrix.build.ld }}
      AR: ${{ matrix.build.ar }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - name: test on linux (clang)
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cc: clang-12
            ld: ld.lld-12
            ar: llvm-ar-12
            run: make tests/run

          - name: test on mac (clang)
            os: macos-latest
            target: x86_64-apple-darwin
            cc: clang
            ld: ld
            ar: ar
            run: |
              $CC --version
              make tests/run

          - name: test on windows (msvc)
            os: windows-latest
            target: x86_64-pc-windows-msvc
            cc: cl.exe
            ld: link.exe
            run: |
              make tests/run

          - name: test on windows (mingw)
            os: windows-latest
            target: x86_64-pc-windows-gnu
            cc: gcc
            ld: ld
            ar: ar
            run: |
              gcc --version
              make tests/run

          - name: valgrind
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cc: clang-12
            ld: ld.lld-12
            ar: llvm-ar-12
            run: |
              sudo apt-get update
              sudo apt-get install -y valgrind libtool-bin
              make tests/runner
              valgrind ./tests/runner

          - name: asan
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cc: clang-12
            ld: ld.lld-12
            ar: llvm-ar-12
            run: ASAN_OPTIONS=detect_leaks=1 CFLAGS="-fsanitize=address" make tests/run

    steps:
      - name: setup msvc on windows
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.build.target }}
          override: true

      - name: print system info
        run: |
          rustc --version --verbose
          which make
          make --version
          which bash
          bash --version

      - name: checkout
        uses: actions/checkout@v2

      - name: codegen
        env:
          RUSTFLAGS: ""
        run: |
          make do-codegen
          make token_ids.h

      - name: run tests
        run: ${{ matrix.build.run }}

  test-header:
    name: test building lib-ruby-parser.h
    runs-on: ubuntu-latest
    env:
      TARGET: x86_64-unknown-linux-gnu
    steps:
      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: checkout
        uses: actions/checkout@v2

      - name: build lib-ruby-parser.h
        run: make lib-ruby-parser.h

      - name: validate lib-ruby-parser.h
        run: clang -fsyntax-only -Wall -Wextra -Wpedantic lib-ruby-parser.h
