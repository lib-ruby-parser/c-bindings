# This is a template cbindgen.toml file with all of the default values.
# Some values are commented out because their absence is the real default.
#
# See https://github.com/eqrion/cbindgen/blob/master/docs.md#cbindgentoml
# for detailed documentation of every option here.

language = "C"

############## Options for Wrapping the Contents of the Header #################

header = "/* Text to put at the beginning of the generated file. Probably a license. */"
# trailer = "/* Text to put at the end of the generated file */"
include_guard = "LIB_RUBY_PARSER_C_BINDINGS_H"
# pragma_once = true
autogen_warning = "/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */"
include_version = false
# namespace = "my_namespace"
after_includes = """

struct LIB_RUBY_PARSER_Node;
typedef struct LIB_RUBY_PARSER_Node* LIB_RUBY_PARSER_MaybeNodePtr;
typedef struct LIB_RUBY_PARSER_Node* LIB_RUBY_PARSER_NodePtr;

struct LIB_RUBY_PARSER_Token;
typedef struct LIB_RUBY_PARSER_Token* LIB_RUBY_PARSER_TokenPtr;
"""
includes = []
namespaces = []
no_includes = false
sys_includes = []
using_namespaces = []

############################ Code Style Options ################################

braces = "SameLine"
documentation = true
documentation_style = "c99"
line_endings = "LF" # also "CR", "CRLF", "Native"
line_length = 100
tab_width = 2

############################# Codegen Options ##################################

sort_by = "Name" # default for `fn.sort_by` and `const.sort_by`
style = "both"
usize_is_size_t = true

[defines]
# "target_os = freebsd" = "DEFINE_FREEBSD"
# "feature = serde" = "DEFINE_SERDE"

[export]
exclude = [
  "MaybePtr_Node",
  "Ptr_Node",
  "lib_ruby_parser_allocate",
  "lib_ruby_parser_free",
  "Ptr_Token",
  "parse",
]
include = [
  "Node",
]
item_types = []
prefix = "LIB_RUBY_PARSER_"
renaming_overrides_prefixing = false

[export.rename]
"ForeignParserOptions" = "ParserOptions"
"List_Comment" = "CommentList"
"List_Diagnostic" = "DiagnosticList"
"List_MagicComment" = "MagicCommentList"
"List_Node" = "NodeList"
"List_SourceLine" = "SourceLineList"
"List_Token" = "TokenList"
"List_u8" = "ByteList"
"MaybePtr_Node" = "MaybeNodePtr"
"Ptr_Node" = "NodePtr"
"Ptr_Token" = "TokenPtr"
"SharedList_u8" = "SharedByteList"

[export.body]

[export.mangle]

[fn]
rename_args = "None"
# must_use = "MUST_USE_FUNC"
# no_return = "NO_RETURN"
# prefix = "START_FUNC"
# postfix = "END_FUNC"
args = "auto"
sort_by = "Name"

[struct]
rename_fields = "None"
# must_use = "MUST_USE_STRUCT"
derive_constructor = false
derive_eq = false
derive_gt = false
derive_gte = false
derive_lt = false
derive_lte = false
derive_neq = false

[enum]
rename_variants = "QualifiedScreamingSnakeCase"
# must_use = "MUST_USE_ENUM"
add_sentinel = false
derive_const_casts = false
derive_helper_methods = false
derive_mut_casts = false
prefix_with_name = false
# cast_assert_name = "ASSERT"
derive_tagged_enum_copy_constructor = false
derive_tagged_enum_destructor = false
enum_class = true
private_default_tagged_enum_constructor = false

[const]
allow_constexpr = false
allow_static_const = true
sort_by = "Name"

[macro_expansion]
bitflags = false

############## Options for How Your Rust library Should Be Parsed ##############

[parse]
clean = false
exclude = []
extra_bindings = ["lib-ruby-parser"]
include = ["lib-ruby-parser"]
parse_deps = true

[parse.expand]
all_features = false
crates = ["lib-ruby-parser"]
default_features = true
features = []
