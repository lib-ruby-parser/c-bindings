// This file is autogenerated by {{ template }}

#[allow(unused_imports)]
use lib_ruby_parser::{Node, nodes::*, Loc, Bytes};
use crate::blob_type;

blob_type!(NodeBlob, Node);
blob_type!(NodeListBlob, Vec<Node>);

#[cfg(feature = "tests")]
mod helpers {
    use super::*;

    pub(crate) fn make_node() -> Box<Node> {
        Box::new(Node::Line(Line { expression_l: make_loc() }))
    }
    pub(crate) fn make_nodes() -> Vec<Node> {
        vec![*make_node()]
    }
    pub(crate) fn make_maybe_node() -> Option<Box<Node>> {
        Some(make_node())
    }
    pub(crate) fn make_loc() -> Loc {
        Loc { begin: 1, end: 2 }
    }
    pub(crate) fn make_maybe_loc() -> Option<Loc> {
        Some(make_loc())
    }
    pub(crate) fn make_str() -> String {
        String::from("foo")
    }
    pub(crate) fn make_maybe_str() -> Option<String> {
        Some(make_str())
    }
    pub(crate) fn make_string_value() -> Bytes {
        Bytes::new(vec![1, 2, 3])
    }
    pub(crate) fn make_u8() -> u8 {
        42
    }
}

{% for node in nodes %}
#[cfg(feature = "tests")]
#[no_mangle]
pub extern "C" fn lib_ruby_parser__test__make_{{ node.camelcase_name | camelcase_to_snakecase }}_node() -> NodeBlob {
    NodeBlob::from(
        Node::{{ node.camelcase_name }}({{ node.camelcase_name }} {
            {%- for field in node.fields %}
            {%- case field.field_type -%}
            {%- when "Node" -%}
                {%- assign make_function_name = "make_node" -%}
            {%- when "Nodes" -%}
                {%- assign make_function_name = "make_nodes" -%}
            {%- when "MaybeNode" or "RegexpOptions" -%}
                {%- assign make_function_name = "make_maybe_node" -%}
            {%- when "Loc" -%}
                {%- assign make_function_name = "make_loc" -%}
            {%- when "MaybeLoc" -%}
                {%- assign make_function_name = "make_maybe_loc" -%}
            {%- when "Str" or "RawStr" -%}
                {%- assign make_function_name = "make_str" -%}
            {%- when "MaybeStr" or "Chars" -%}
                {%- assign make_function_name = "make_maybe_str" -%}
            {%- when "StringValue" -%}
                {%- assign make_function_name = "make_string_value" -%}
            {%- when "U8" -%}
                {%- assign make_function_name = "make_u8" -%}
            {%- else -%}
                /* Unsupported node field type {{ field.field_type }} */
                {%- assign make_function_name = "COMPILE_ERROR" -%}
            {%- endcase %}
            {{ field.snakecase_name | escape_rust_keyword }}: helpers::{{ make_function_name }}(),
            {%- endfor %}
        })
    )
}
{% endfor %}

{% for node in nodes %}
#[no_mangle]
pub extern "C" fn LIB_RUBY_PARSER_drop_node_{{ node.camelcase_name | camelcase_to_snakecase }}(variant: *mut {{ node.camelcase_name }}) {
    unsafe { std::ptr::drop_in_place(variant) }
}
{% endfor %}

#[no_mangle]
pub extern "C" fn LIB_RUBY_PARSER_drop_node(node: *mut Node) {
    unsafe { std::ptr::drop_in_place(node) }
}

#[cfg(feature = "tests")]
#[no_mangle]
pub extern "C" fn lib_ruby_parser__test__make_node_list() -> NodeListBlob {
    let mut v = helpers::make_nodes();
    v.reserve(10);
    NodeListBlob::from(v)
}

#[no_mangle]
pub extern "C" fn LIB_RUBY_PARSER_drop_node_list(node_list: *mut Vec<Node>) {
    unsafe { std::ptr::drop_in_place(node_list) }
}
