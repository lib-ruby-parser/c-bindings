// This file is autogenerated by {{ template }}

#[allow(unused_imports)]
use lib_ruby_parser::{DiagnosticMessage, nodes::*, Loc, Bytes};
use crate::blob_type;

blob_type!(DiagnosticMessageBlob, DiagnosticMessage);
blob_type!(DiagnosticMessageListBlob, Vec<DiagnosticMessage>);

#[cfg(feature = "tests")]
mod helpers {
    use super::*;

    pub(crate) fn make_message() -> Box<DiagnosticMessage> {
        Box::new(DiagnosticMessage::FractionAfterNumeric {})
    }
    pub(crate) fn make_messages() -> Vec<DiagnosticMessage> {
        vec![*make_message()]
    }
    pub(crate) fn make_str() -> String {
        String::from("foo")
    }
    pub(crate) fn make_u8() -> u8 {
        42
    }
}

{% for message in messages %}
#[cfg(feature = "tests")]
#[no_mangle]
pub extern "C" fn lib_ruby_parser__test__make_{{ message.camelcase_name | camelcase_to_snakecase }}_message() -> DiagnosticMessageBlob {
    DiagnosticMessageBlob::from(
        DiagnosticMessage::{{ message.camelcase_name }} {
            {%- for field in message.fields %}
            {%- case field.field_type -%}
            {%- when "Str" -%}
                {%- assign make_function_name = "make_str" -%}
            {%- when "Byte" -%}
                {%- assign make_function_name = "make_u8" -%}
            {%- else -%}
                /* Unsupported node field type {{ field.field_type }} */
                {%- assign make_function_name = "COMPILE_ERROR" -%}
            {%- endcase %}
            {{ field.snakecase_name | escape_rust_keyword }}: helpers::{{ make_function_name }}(),
            {%- endfor %}
        }
    )
}
{% endfor %}

#[no_mangle]
pub extern "C" fn LIB_RUBY_PARSER_drop_message(message: *mut DiagnosticMessage) {
    unsafe { std::ptr::drop_in_place(message) }
}

#[cfg(feature = "tests")]
#[no_mangle]
pub extern "C" fn lib_ruby_parser__test__make_message_list() -> DiagnosticMessageListBlob {
    let mut v = helpers::make_messages();
    v.reserve(10);
    DiagnosticMessageListBlob::from(v)
}

#[no_mangle]
pub extern "C" fn LIB_RUBY_PARSER_drop_message_list(message_list: *mut Vec<DiagnosticMessage>) {
    unsafe { std::ptr::drop_in_place(message_list) }
}
