#ifndef LIB_RUBY_PARSER_NODES_H
#define LIB_RUBY_PARSER_NODES_H

// This file is autogenerated by {{ template }}

#include <stddef.h>
#include "string.h"
#include "loc.h"
#include "bytes.h"

/// @defgroup nodes Node variants
/// @{
/// @}

struct LIB_RUBY_PARSER_Node;
typedef struct LIB_RUBY_PARSER_Node LIB_RUBY_PARSER_Node;
/// Node list (an equivalent of `Vec<Node>`)
/// @ingroup output
typedef struct
{
    LIB_RUBY_PARSER_Node *ptr;
    size_t capacity;
    size_t len;
} LIB_RUBY_PARSER_NodeList;

{% for node in nodes %}
{{ node.comment | render_comment: "///", 0 }}
/// @ingroup nodes
typedef struct
{
    {%- for field in node.fields %}
    {%- case field.field_type -%}
    {%- when "Node" -%}
        {%- assign field_type = "LIB_RUBY_PARSER_Node *" -%}
    {%- when "Nodes" -%}
        {%- assign field_type = "LIB_RUBY_PARSER_NodeList" -%}
    {%- when "MaybeNode" or "RegexpOptions" -%}
        {%- assign field_type = "LIB_RUBY_PARSER_Node *" -%}
    {%- when "Loc" -%}
        {%- assign field_type = "LIB_RUBY_PARSER_Loc" -%}
    {%- when "MaybeLoc" -%}
        {%- assign field_type = "LIB_RUBY_PARSER_MaybeLoc" -%}
    {%- when "Str" or "RawStr" -%}
        {%- assign field_type = "LIB_RUBY_PARSER_String" -%}
    {%- when "MaybeStr" or "Chars" -%}
        {%- assign field_type = "LIB_RUBY_PARSER_MaybeString" -%}
    {%- when "StringValue" -%}
        {%- assign field_type = "LIB_RUBY_PARSER_Bytes" -%}
    {%- when "U8" -%}
        {%- assign field_type = "uint8_t" -%}
    {%- else -%}
        {%- assign field_type = "COMPILE ERROR" -%}
    {%- endcase %}
    {{ field.comment | render_comment: "///", 4 | replace: "~", "^" }}
    {{ field_type }} {{ field.snakecase_name | escape_c_keyword }};
    {%- endfor %}
} LIB_RUBY_PARSER_{{ node.camelcase_name }};
{% endfor %}

/// @ingroup output
struct LIB_RUBY_PARSER_Node {
    enum {
        {%- for node in nodes %}
        LIB_RUBY_PARSER_NODE_{{ node.camelcase_name | camelcase_to_snakecase | upcase }},
        {%- endfor %}
    } tag;

    union {
        {%- for node in nodes %}
        LIB_RUBY_PARSER_{{ node.camelcase_name }} {{ node.camelcase_name | camelcase_to_snakecase | escape_c_keyword }};
        {%- endfor %}
    } as;
};

{% for node in nodes %}
void LIB_RUBY_PARSER_drop_node_{{ node.camelcase_name | camelcase_to_snakecase }}(LIB_RUBY_PARSER_{{ node.camelcase_name }} *variant);
{%- endfor %}

void LIB_RUBY_PARSER_drop_node(LIB_RUBY_PARSER_Node *node);
void LIB_RUBY_PARSER_drop_node_list(LIB_RUBY_PARSER_NodeList *node_list);

#endif // LIB_RUBY_PARSER_NODES_H
