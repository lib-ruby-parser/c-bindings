// This file is autogenerated by {{ template }}

#include "../messages.h"
#include "test_helper.h"

#define assert_expected_str_value(str) \
    assert_string_eq((str), "foo")

#define assert_expected_u8_value(u8) \
    assert_eq((u8), 42)

#define assert_expected_messages_value(messages) \
    assert_eq((messages).len, 1); \
    assert_eq((messages).ptr[0].tag, LIB_RUBY_PARSER_MESSAGE_FRACTION_AFTER_NUMERIC)

{% for message in messages %}
LIB_RUBY_PARSER_DiagnosticMessage lib_ruby_parser__test__make_{{ message.camelcase_name | camelcase_to_snakecase }}_message(void);
static void test_message_{{ message.camelcase_name | camelcase_to_snakecase }}(void)
{
    annotate_test;
    LIB_RUBY_PARSER_DiagnosticMessage message;

    message = lib_ruby_parser__test__make_{{ message.camelcase_name | camelcase_to_snakecase }}_message();
    assert_eq(message.tag, LIB_RUBY_PARSER_MESSAGE_{{ message.camelcase_name | camelcase_to_snakecase | upcase }});
    LIB_RUBY_PARSER_{{ message.camelcase_name }} variant = message.as.{{ message.camelcase_name | camelcase_to_snakecase | escape_c_keyword }};
    {%- for field in message.fields %}
    {%- case field.field_type -%}
    {%- when "Str" -%}
        {%- assign assert_method_name = "assert_expected_str_value" -%}
    {%- when "Byte" -%}
        {%- assign assert_method_name = "assert_expected_u8_value" -%}
    {%- else -%}
        /* Unsupported node field type {{ field.field_type }} */
        {%- assign assert_method_name = "COMPILE ERROR" -%}
    {%- endcase %}
    {{ assert_method_name }}(variant.{{ field.snakecase_name | escape_c_keyword }});
    {%- endfor %}
    (void)variant;
    LIB_RUBY_PARSER_drop_message(&message);
}
{% endfor %}

LIB_RUBY_PARSER_DiagnosticMessageList lib_ruby_parser__test__make_message_list(void);
static void test_message_list(void)
{
    annotate_test;

    LIB_RUBY_PARSER_DiagnosticMessageList message_list = lib_ruby_parser__test__make_message_list();
    assert_expected_messages_value(message_list);
    LIB_RUBY_PARSER_drop_message_list(&message_list);
}

void run_test_group_message(void);
void run_test_group_message(void)
{
    const test_fn_t tests[] = {
        {%- for message in messages %}
        test_message_{{ message.camelcase_name | camelcase_to_snakecase }},
        {%- endfor %}
        test_message_list,
    };

    run_tests_as_group("message", tests, sizeof(tests) / sizeof(test_fn_t));
}
