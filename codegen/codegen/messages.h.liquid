#ifndef LIB_RUBY_PARSER_MESSAGES_H
#define LIB_RUBY_PARSER_MESSAGES_H

// This file is autogenerated by {{ template }}

#include <stdint.h>
#include "string.h"

/// @defgroup messages Diagnostic Message Variants
/// @{
/// @}

{% for message in messages %}
{{ message.comment | render_comment: "///", 0 | replace: "\", "\\" }}
/// @ingroup messages
typedef struct
{
    {%- if message.fields == empty %}
    /// dummy byte (zero-sized structs are no allowed in C)
    uint8_t dummy;
    {%- endif %}
    {%- for field in message.fields %}
    {%- case field.field_type -%}
    {%- when "Str" -%}
        {%- assign field_type = "LIB_RUBY_PARSER_String" -%}
    {%- when "Byte" -%}
        {%- assign field_type = "uint8_t" -%}
    {%- else -%}
        {%- assign field_type = "COMPILE ERROR" -%}
    {%- endcase %}
    {{ field.comment | render_comment: "///", 4 }}
    {{ field_type }} {{ field.snakecase_name | escape_c_keyword }};
    {%- endfor %}
} LIB_RUBY_PARSER_{{ message.camelcase_name }};
{% endfor %}

/// @ingroup output
typedef struct
{
    enum {
        {%- for message in messages %}
        LIB_RUBY_PARSER_MESSAGE_{{ message.camelcase_name | camelcase_to_snakecase | upcase }},
        {%- endfor %}
    } tag;

    union {
        {%- for message in messages %}
        LIB_RUBY_PARSER_{{ message.camelcase_name }} {{ message.camelcase_name | camelcase_to_snakecase | escape_c_keyword }};
        {%- endfor %}
    } as;
} LIB_RUBY_PARSER_DiagnosticMessage;

void LIB_RUBY_PARSER_drop_message(LIB_RUBY_PARSER_DiagnosticMessage *message);

typedef struct
{
    LIB_RUBY_PARSER_DiagnosticMessage *ptr;
    size_t capacity;
    size_t len;
} LIB_RUBY_PARSER_DiagnosticMessageList;
void LIB_RUBY_PARSER_drop_message_list(LIB_RUBY_PARSER_DiagnosticMessageList *message_list);

#endif // LIB_RUBY_PARSER_MESSAGES_H
