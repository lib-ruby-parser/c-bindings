use lib_ruby_parser_nodes::{template::*, MessageField};

const TEMPLATE: &str = "// This file is autogenerated by {{ helper generated-by }}

#include \"messages.h\"

#ifdef TEST_ENV

#include \"test_helper.h\"

#define assert_expected_str_value(str) \\
    assert_string_eq((str), \"foo\")

#define assert_expected_u8_value(u8) \\
    assert_eq((u8), 42)

#define assert_expected_messages_value(messages) \\
    assert_eq((messages).len, 1); \\
    assert_eq((messages).ptr[0].tag, LIB_RUBY_PARSER_MESSAGE_FRACTION_AFTER_NUMERIC)

{{ each message }}<dnl>
LIB_RUBY_PARSER_DiagnosticMessage lib_ruby_parser__test__make_{{ helper message-lower-name }}_message(void);
static void test_message_{{ helper message-lower-name }}(void)
{
    annotate_test;
    LIB_RUBY_PARSER_DiagnosticMessage message;

    message = lib_ruby_parser__test__make_{{ helper message-lower-name }}_message();
    assert_eq(message.tag, LIB_RUBY_PARSER_MESSAGE_{{ helper message-upper-name }});
    LIB_RUBY_PARSER_{{ helper message-camelcase-name }} variant = message.as.{{ helper message-lower-name }};
{{ each message-field }}<dnl>
    {{ helper assert-field-fn }}(variant.{{ helper message-field-c-name }});
{{ end }}<dnl>
    (void)variant;
    LIB_RUBY_PARSER_drop_message(&message);
}
{{ end }}<dnl>

LIB_RUBY_PARSER_DiagnosticMessageList lib_ruby_parser__test__make_message_list(void);
static void test_message_list(void)
{
    annotate_test;

    LIB_RUBY_PARSER_DiagnosticMessageList message_list = lib_ruby_parser__test__make_message_list();
    assert_expected_messages_value(message_list);
    LIB_RUBY_PARSER_drop_message_list(&message_list);
}

void run_test_group_message(void)
{
    const test_fn_t tests[] = {
{{ each message }}<dnl>
        test_message_{{ helper message-lower-name }},
{{ end }}<dnl>
        test_message_list,
    };

    run_tests_as_group(\"message\", tests, sizeof(tests) / sizeof(test_fn_t));
}

#endif
";

pub(crate) fn codegen() {
    let template = TemplateRoot::new(TEMPLATE).unwrap();
    let mut fns = crate::codegen::fns::default_fns!();

    fns.register::<MessageField, F::Helper>("assert-field-fn", helpers::assert_field_fn);

    let contents = template.render(ALL_DATA, &fns);
    std::fs::write("../messages.c", contents).unwrap();
}

mod helpers {
    use lib_ruby_parser_nodes::MessageField;

    pub(crate) fn assert_field_fn(message_field: &MessageField) -> String {
        use lib_ruby_parser_nodes::MessageFieldType::*;

        match message_field.field_type {
            Str => "assert_expected_str_value",
            Byte => "assert_expected_u8_value",
        }
        .to_string()
    }
}
