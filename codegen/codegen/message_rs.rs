use lib_ruby_parser_nodes::{template::*, MessageField};

const TEMPLATE: &str = "// This file is autogenerated by {{ helper generated-by }}

#[allow(unused_imports)]
use lib_ruby_parser::{DiagnosticMessage, nodes::*, Loc, Bytes};
use crate::blob_type;

blob_type!(DiagnosticMessageBlob, DiagnosticMessage);
blob_type!(DiagnosticMessageListBlob, Vec<DiagnosticMessage>);

#[cfg(feature = \"tests\")]
mod helpers {
    use super::*;

    pub(crate) fn make_message() -> Box<DiagnosticMessage> {
        Box::new(DiagnosticMessage::FractionAfterNumeric {})
    }
    pub(crate) fn make_messages() -> Vec<DiagnosticMessage> {
        vec![*make_message()]
    }
    pub(crate) fn make_str() -> String {
        String::from(\"foo\")
    }
    pub(crate) fn make_u8() -> u8 {
        42
    }
}

{{ each message }}<dnl>
#[cfg(feature = \"tests\")]
#[no_mangle]
pub extern \"C\" fn lib_ruby_parser__test__make_{{ helper message-lower-name }}_message() -> DiagnosticMessageBlob {
    DiagnosticMessageBlob::from(
        DiagnosticMessage::{{ helper message-camelcase-name }} {
{{ each message-field }}<dnl>
            {{ helper message-field-name }}: helpers::{{ helper make-field-fn }}(),
{{ end }}<dnl>
        }
    )
}
{{ end }}<dnl>

#[no_mangle]
pub extern \"C\" fn LIB_RUBY_PARSER_drop_message(message: *mut DiagnosticMessage) {
    unsafe { std::ptr::drop_in_place(message) }
}

#[cfg(feature = \"tests\")]
#[no_mangle]
pub extern \"C\" fn lib_ruby_parser__test__make_message_list() -> DiagnosticMessageListBlob {
    DiagnosticMessageListBlob::from(helpers::make_messages())
}

#[no_mangle]
pub extern \"C\" fn LIB_RUBY_PARSER_drop_message_list(message_list: *mut Vec<DiagnosticMessage>) {
    unsafe { std::ptr::drop_in_place(message_list) }
}
";

pub(crate) fn codegen() {
    let template = TemplateRoot::new(TEMPLATE).unwrap();
    let mut fns = crate::codegen::fns::default_fns!();

    fns.register::<MessageField, F::Helper>("make-field-fn", helpers::make_field_fn);

    let contents = template.render(ALL_DATA, &fns);
    std::fs::write("../ruby-parser-c/src/message.rs", contents).unwrap();
}

mod helpers {
    use lib_ruby_parser_nodes::MessageField;

    pub(crate) fn make_field_fn(message_field: &MessageField) -> String {
        use lib_ruby_parser_nodes::MessageFieldType::*;

        match message_field.field_type {
            Str { .. } => "make_str",
            Byte => "make_u8",
        }
        .to_string()
    }
}
