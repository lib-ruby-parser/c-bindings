// This file is autogenerated by {{ template }}

#include "../nodes.h"
#include "test_helper.h"

#define assert_expected_node_value(node) \
    assert_eq((node)->tag, LIB_RUBY_PARSER_NODE_LINE)

#define assert_expected_nodes_value(nodes) \
    assert_eq((nodes).len, 1); \
    assert_expected_node_value(&((nodes).ptr[0]))

#define assert_expected_maybe_node_value(maybe_node) \
    assert_expected_node_value(maybe_node)

#define assert_expected_loc_value(loc) \
    assert_eq((loc).begin, 1); \
    assert_eq((loc).end, 2)

#define assert_expected_maybe_loc_value(maybe_loc) \
    assert_eq((maybe_loc).tag, LIB_RUBY_PARSER_SOME_LOC); \
    assert_eq((maybe_loc).as.loc.begin, 1); \
    assert_eq((maybe_loc).as.loc.end, 2)

#define assert_expected_str_value(str) \
    assert_string_eq((str), "foo")

#define assert_expected_maybe_str_value(maybe_str) \
    assert_string_eq((maybe_str).string, "foo")

#define assert_expected_string_value_value(string_value) \
    assert_byte_list((string_value).raw, "\1\2\3")

#define assert_expected_u8_value(u8) \
    assert_eq((u8), 42)

{% for node in nodes %}
LIB_RUBY_PARSER_Node lib_ruby_parser__test__make_{{ node.camelcase_name | camelcase_to_snakecase }}_node(void);
static void test_node_{{ node.camelcase_name | camelcase_to_snakecase }}(void)
{
    annotate_test;
    LIB_RUBY_PARSER_Node node;

    node = lib_ruby_parser__test__make_{{ node.camelcase_name | camelcase_to_snakecase }}_node();
    assert_eq(node.tag, LIB_RUBY_PARSER_NODE_{{ node.camelcase_name | camelcase_to_snakecase | upcase }});
    LIB_RUBY_PARSER_{{ node.camelcase_name }} variant = node.as.{{ node.camelcase_name | camelcase_to_snakecase | escape_c_keyword }};
    {%- for field in node.fields %}
    {%- case field.field_type -%}
    {%- when "Node" -%}
        {%- assign assert_method_name = "assert_expected_node_value" -%}
    {%- when "Nodes" -%}
        {%- assign assert_method_name = "assert_expected_nodes_value" -%}
    {%- when "MaybeNode" or "RegexpOptions" -%}
        {%- assign assert_method_name = "assert_expected_maybe_node_value" -%}
    {%- when "Loc" -%}
        {%- assign assert_method_name = "assert_expected_loc_value" -%}
    {%- when "MaybeLoc" -%}
        {%- assign assert_method_name = "assert_expected_maybe_loc_value" -%}
    {%- when "Str" or "RawStr" -%}
        {%- assign assert_method_name = "assert_expected_str_value" -%}
    {%- when "MaybeStr" or "Chars" -%}
        {%- assign assert_method_name = "assert_expected_maybe_str_value" -%}
    {%- when "StringValue" -%}
        {%- assign assert_method_name = "assert_expected_string_value_value" -%}
    {%- when "U8" -%}
        {%- assign assert_method_name = "assert_expected_u8_value" -%}
    {%- else -%}
        /* Unsupported node field type {{ field.field_type }} */
        {%- assign assert_method_name = "COMPILE_ERROR" -%}
    {%- endcase %}
    {{ assert_method_name }}(variant.{{ field.snakecase_name | escape_c_keyword }});
    {%- endfor %}
    LIB_RUBY_PARSER_drop_node_{{ node.camelcase_name | camelcase_to_snakecase }}(&variant);

    node = lib_ruby_parser__test__make_{{ node.camelcase_name | camelcase_to_snakecase }}_node();
    LIB_RUBY_PARSER_drop_node(&node);
}
{% endfor %}

LIB_RUBY_PARSER_NodeList lib_ruby_parser__test__make_node_list(void);
static void test_node_list(void)
{
    annotate_test;

    LIB_RUBY_PARSER_NodeList node_list = lib_ruby_parser__test__make_node_list();
    assert_expected_nodes_value(node_list);
    LIB_RUBY_PARSER_drop_node_list(&node_list);
}

void run_test_group_node(void);
void run_test_group_node(void)
{
    const test_fn_t tests[] = {
        {%- for node in nodes %}
        test_node_{{ node.camelcase_name | camelcase_to_snakecase }},
        {%- endfor %}
        test_node_list,
    };

    run_tests_as_group("node", tests, sizeof(tests) / sizeof(test_fn_t));
}
